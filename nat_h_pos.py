import numpy as np 
from combinations_rotations import *

import numpy as np

framework_o_pos = [
    [13.036919594,        15.716266632,         5.688539505],
    [ 0.415409982,         1.272428989,         5.672039986],
    [17.884588242,        17.357570648,         5.672039986],
    [ 4.990409851,         3.385070801,         0.722040236],
    [ 4.159589767,         5.929928780,         0.722040236],
    [ 0.415409982,        10.587429047,         2.372040272],
    [17.884588242,         8.042570114,         2.372040272],
    [ 4.990409851,        12.700070381,         4.022040367],
    [ 4.159589767,        15.244928360,         4.022040367],
    [ 9.565409660,         1.272428989,         2.372040272],
    [ 8.734589577,        17.357570648,         2.372040272],
    [14.140409470,         3.385070801,         4.022040367],
    [13.309589386,         5.929928780,         4.022040367],
    [ 9.565409660,        10.587429047,         5.672039986],
    [ 8.734589577,         8.042570114,         5.672039986],
    [14.140409470,        12.700070381,         0.722040236],
    [13.309589386,        15.244928360,         0.722040236],
    [ 1.288319945,         3.398111820,         3.967260122],
    [17.011678696,        15.231887817,         3.967260122],
    [ 5.863319874,         1.259387851,         5.617259979],
    [ 3.286679983,         8.055611610,         5.617259979],
    [ 1.288319945,        12.713110924,         0.667259753],
    [17.011678696,         5.916887760,         0.667259753],
    [ 5.863319874,        10.574387550,         2.317259789],
    [ 3.286679983,        17.370611191,         2.317259789],
    [10.438319206,         3.398111820,         0.667259753],
    [ 7.861679554,        15.231887817,         0.667259753],
    [15.013319016,         1.259387851,         2.317259789],
    [12.436679840,         8.055611610,         2.317259789],
    [10.438319206,        12.713110924,         3.967260122],
    [ 7.861679554,         5.916887760,         3.967260122],
    [15.013319016,        10.574387550,         5.617259979],
    [12.436679840,        17.370611191,         5.617259979],
    [ 1.804379940,         0.644598007,         3.298020124],
    [16.495618820,        17.985401154,         3.298020124],
    [ 6.379379749,         4.012901783,         4.948019981],
    [ 2.770619869,         5.302097797,         4.948019981],
    [ 1.804379940,         9.959597588,         6.598020077],
    [16.495618820,         8.670401573,         6.598020077],
    [ 6.379379749,        13.327900887,         1.648020387],
    [ 2.770619869,        14.617097855,         1.648020387],
    [10.954380035,         0.644598007,         6.598020077],
    [ 7.345619678,        17.985401154,         6.598020077],
    [15.529379845,         4.012901783,         1.648020387],
    [11.920619011,         5.302097797,         1.648020387],
    [10.954380035,         9.959597588,         3.298020124],
    [ 7.345619678,         8.670401573,         3.298020124],
    [15.529379845,        13.327900887,         4.948019981],
    [11.920619011,        14.617097855,         4.948019981],
    [ 3.775290012,         2.842937946,         4.729559898],
    [14.524708748,        15.787061691,         4.729559898],
    [ 8.350290298,         1.814561844,         6.379559994],
    [ 0.799709857,         7.500437260,         6.379559994],
    [ 3.775290012,        12.157937050,         1.429559588],
    [14.524708748,         6.472062111,         1.429559588],
    [ 8.350290298,        11.129561424,         3.079559565],
    [ 0.799709857,        16.815437317,         3.079559565],
    [12.925290108,         2.842937946,         1.429559588],
    [ 5.374709606,        15.787061691,         1.429559588],
    [17.500289917,         1.814561844,         3.079559565],
    [ 9.949708939,         7.500437260,         3.079559565],
    [12.925290108,        12.157937050,         4.729559898],
    [ 5.374709606,         6.472062111,         4.729559898],
    [17.500289917,        11.129561424,         6.379559994],
    [ 9.949708939,        16.815437317,         6.379559994],
    [ 3.292170048,         4.232735634,         2.547600031],
    [15.007829666,        14.397262573,         2.547600031],
    [ 7.867169380,         0.424763948,         4.197600365],
    [ 1.282829881,         8.890235901,         4.197600365],
    [ 3.292170048,        13.547736168,         5.847599983],
    [15.007829666,         5.082263947,         5.847599983],
    [ 7.867169380,         9.739763260,         0.897600234],
    [ 1.282829881,        18.205236435,         0.897600234],
    [12.442169189,         4.232735634,         5.847599983],
    [ 5.857830048,        14.397262573,         5.847599983],
    [17.017169952,         0.424763948,         0.897600234],
    [10.432829857,         8.890235901,         0.897600234],
    [12.442169189,        13.547736168,         2.547600031],
    [ 5.857830048,         5.082263947,         2.547600031],
    [17.017169952,         9.739763260,         4.197600365],
    [10.432829857,        18.205236435,         4.197600365],
]

# extend unitcell in both directions
num = len(framework_o_pos)
for i in range(num):
    pos = framework_o_pos[i]
    framework_o_pos.append([pos[0], pos[1], -1*pos[2]])
    framework_o_pos.append([pos[0], pos[1], 2*pos[2]])

# change to np arrays
for pos in framework_o_pos:
    pos = np.array(pos)

def get_h_positions(output_arr, o_np_pos, angle=104.5, bond_length=0.98, angle_tolerance=5, distance_tolerance=4):
    # clean O array of atoms that are positioned more than distance_tolerance away
    i = 0
    for o_pos in framework_o_pos:
        pos = np.subtract(o_np_pos, o_pos)
        if np.sqrt(pos.dot(pos)) > distance_tolerance:
            framework_o_pos.pop(i)
        i+=1
    print("len(framework_o_pos): " + str(len(framework_o_pos)))
    # get combinations of all possible h-o bonds 
    # returns indexes of potential framework O atoms to "bond" 
    comb = combinations(len(framework_o_pos), 2)
    # append valid h_positions 
    for c in range(len(framework_o_pos)):
        o1 = framework_o_pos[comb[c][0]]
        o2 = framework_o_pos[comb[c][1]]
        if abs(angle_between(np.subtract(o1,o_np_pos),np.subtract(o2,o_np_pos)) - angle) < 5:
            output_arr.append([np.add(o_np_pos, bond_length * unit_vector(np.subtract(o1,o_np_pos))),
                                np.add(o_np_pos, bond_length * unit_vector(np.subtract(o2,o_np_pos)))])

if __name__ == "__main__":
    args = sys.argv
    sys.setrecursionlimit(8385) # 130 choose 2

    print("args: " + str(args))
    
    output_arr = []
    custom_o_pos = []
 
    # 1.032119989         3.526658773         0.716099977 O81
    # 17.267879486        15.103340149         0.716099977 O82
    #  5.607119560         1.130840898         2.366100073 O83
    #  3.542879820         8.184158325         2.366100073 O84
    #  1.032119989        12.841658592         4.016099930 O85
    # 17.267879486         5.788340569         4.016099930 O86
    #  5.607119560        10.445840836         5.666100025 O87
    #  3.542879820        17.499158859         5.666100025 O88
    # 10.182119370         3.526658773         4.016099930 O89
    #  8.117879868        15.103340149         4.016099930 O90
    # 14.757119179         1.130840898         5.666100025 O91
    # 12.692879677         8.184158325         5.666100025 O92
    # 10.182119370        12.841658592         0.716099977 O93
    #  8.117879868         5.788340569         0.716099977 O94
    # 14.757119179        10.445840836         2.366100073 O95
    # 12.692879677        17.499158859         2.366100073 O96

    custom_o_pos = np.array([float(args[1]), float(args[2]), float(args[3])])
    foldername = str(args[4])
    os.mkdir(foldername)
    
    get_h_positions(output_arr, custom_o_pos, distance_tolerance=5, angle_tolerance=4)
    
    i = 0
    for arr in output_arr:
        print(arr)
        f = open(foldername+"/"+foldername+"_"+str(i)+".vasp", 'w')
        copyfile("O91.vasp", foldername+"/"+foldername+"_"+str(i)+".vasp")
        f = open(foldername+"/"+foldername+"_"+str(i)+".vasp", 'a')
        f.write('\n')
        f.write(str(args[1]) + "    " + str(args[2]) + "    " +  str(args[3]))
        f.write('\n')
        f.write( str(output_arr[i][0].item(0)) + "    " + str(output_arr[i][0].item(1)) + "    " + str(output_arr[i][0].item(2)) )
        f.write('\n')
        f.write( str(output_arr[i][1].item(0)) + "    " + str(output_arr[i][1].item(1)) + "    " + str(output_arr[i][1].item(2)) )
        i+=1


        



    







